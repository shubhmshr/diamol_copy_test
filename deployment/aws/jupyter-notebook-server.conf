# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

description "Jupyter Notebook Server"

start on runlevel [2345]
stop on runlevel [016]

start on started netfs
start on started rsyslog

stop on stopping netfs
stop on stopping rsyslog

respawn

# respawn unlimited times with 5 seconds time interval
respawn limit 0 5

env SLEEP_TIME=10

env DAEMON="jupyter-notebook-server"
env DESC="Jupyter Notebook Server"
env EXEC_PATH="/usr/local/bin/jupyter-notebook"
env SVC_USER="hadoop"
env DAEMON_FLAGS=""
env PIDFILE="/var/run/jupyter/\${DAEMON}.pid"
env LOGFILE="/var/log/jupyter/\${DAEMON}.out"
env WORKING_DIR="/home/hadoop"

pre-start script
  install -d -m 0755 -o \$SVC_USER -g \$SVC_USER \$(dirname $PIDFILE) 1>/dev/null 2>&1 || :
  install -d -m 0755 -o \$SVC_USER -g \$SVC_USER \$(dirname $LOGFILE) 1>/dev/null 2>&1 || :

  if [ ! -x \$EXEC_PATH ]; then
    echo "\$EXEC_PATH is not an executable"
    exit 1
  fi

  run_prestart() {
      cd \${WORKING_DIR}
      su -s /bin/bash \$SVC_USER -c "nohup nice -n 0 \
          \${EXEC_PATH} \$DAEMON_FLAGS \
          > \$LOGFILE 2>&1 & "'echo \$!' > "\$PIDFILE"

  }

  export -f run_prestart
  $EXEC_LAUNCHER run_prestart
end script

script

  # sleep for sometime for the daemon to start running
  sleep \$SLEEP_TIME
  if [ ! -f \$PIDFILE ]; then
    echo "\$PIDFILE not found"
    exit 1
  fi
  pid=\$(<"\$PIDFILE")
  while ps -p \$pid > /dev/null; do
    sleep \$SLEEP_TIME
  done
  echo "\$pid stopped running..."

end script

pre-stop script

 # do nothing

end script

post-stop script
  if [ ! -f \$PIDFILE ]; then
    echo "\$PIDFILE not found"
    exit
  fi
  pid=\$(<"\$PIDFILE")
  if kill \$pid > /dev/null 2>&1; then
    echo "process \$pid is killed"
  fi
  rm -rf \$PIDFILE
end script

